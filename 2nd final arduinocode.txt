#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <DHT.h>
#include <SoftwareSerial.h>

// --- Pin Definitions ---
#define DHTPIN 2
#define DHTTYPE DHT11
#define VOLTAGE_PIN A0
#define CURRENT_PIN A1

// --- Motor Pins ---
const int motorEnablePin = A2;
const int motorPin1 = 7;
const int motorPin2 = 8;

// --- ESP32 Communication Pins ---
#define ESP_RX 10   // Arduino pin connected to ESP32 TX
#define ESP_TX 11   // Arduino pin connected to ESP32 RX

SoftwareSerial espSerial(ESP_RX, ESP_TX);  // RX, TX

// --- Constants ---
float voltageFactor = 5.0;   // Adjust based on voltage divider
float sensitivity = 0.066;   // For ACS712-30A (use 0.185 for 5A, 0.100 for 20A)

// --- Objects ---
DHT dht(DHTPIN, DHTTYPE);
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Use 0x3F if 0x27 doesnâ€™t work

// --- Timing Variables ---
unsigned long previousMillis = 0;
const unsigned long displayInterval = 3000; // Switch display every 3s
int displayMode = 0; // 0=temp/hum, 1=voltage, 2=current

// =============================================================
// === SETUP ===
// =============================================================
void setup() {
  Serial.begin(9600);       // Bluetooth serial
  espSerial.begin(9600);    // ESP32 serial

  // LCD and sensor initialization
  lcd.init();
  lcd.backlight();
  dht.begin();

  // Motor setup
  pinMode(motorEnablePin, OUTPUT);
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  motorStop();
  digitalWrite(motorEnablePin, LOW);

  lcd.setCursor(0, 0);
  lcd.print("System Ready");
  delay(1500);
  lcd.clear();

  Serial.println("Bluetooth Motor + Sensor System Ready.");
  Serial.println("Commands: f=forward, b=backward, w=stop, q=quit");

  espSerial.println("ESP LINK READY");
}

// =============================================================
// === MAIN LOOP ===
// =============================================================
void loop() {
  handleBluetooth();       // Immediate motor control
  updateDisplayCycle();    // Sensor reading cycles
}

// =============================================================
// === BLUETOOTH MOTOR CONTROL (Instant Response)
// =============================================================
void handleBluetooth() {
  if (Serial.available()) {
    char command = tolower(Serial.read());
    Serial.print("Received: ");
    Serial.println(command);

    switch (command) {
      case 'f':
        digitalWrite(motorEnablePin, HIGH);
        motorForward();
        Serial.println("Motor running forward");
        espSerial.println("MOTOR:FORWARD");
        break;

      case 'b':
        digitalWrite(motorEnablePin, HIGH);
        motorBackward();
        Serial.println("Motor running backward");
        espSerial.println("MOTOR:BACKWARD");
        break;

      case 'w':
        motorStop();
        digitalWrite(motorEnablePin, LOW);
        Serial.println("Motor stopped");
        espSerial.println("MOTOR:STOP");
        break;

      case 'q':
        motorStop();
        digitalWrite(motorEnablePin, LOW);
        Serial.println("Quitting. Motor stopped.");
        espSerial.println("MOTOR:QUIT");
        while (true);  // Stop program
        break;

      default:
        Serial.println("Invalid command. Use f, b, w, or q.");
        espSerial.println("INVALID:CMD");
    }
  }
}

// =============================================================
// === NON-BLOCKING DISPLAY CYCLE (Every 3 Seconds)
// =============================================================
void updateDisplayCycle() {
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= displayInterval) {
    previousMillis = currentMillis;
    displayMode = (displayMode + 1) % 3; // Cycle through 0,1,2

    switch (displayMode) {
      case 0:
        displayTemperatureHumidity();
        break;
      case 1:
        displayVoltage();
        break;
      case 2:
        displayCurrent();
        break;
    }
  }
}

// =============================================================
// === SENSOR DISPLAY FUNCTIONS
// =============================================================
void displayTemperatureHumidity() {
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();

  lcd.clear();
  if (isnan(humidity) || isnan(temperature)) {
    lcd.setCursor(0, 0);
    lcd.print("DHT Error!");
    espSerial.println("DHT_ERROR");
    return;
  }

  lcd.setCursor(0, 0);
  lcd.print("Temp:");
  lcd.print(temperature, 1);
  lcd.print((char)223);
  lcd.print("C");

  lcd.setCursor(0, 1);
  lcd.print("Hum:");
  lcd.print(humidity, 1);
  lcd.print("%");

  // --- Send to ESP32 ---
  espSerial.print("TEMP:");
  espSerial.print(temperature, 1);
  espSerial.print(",HUM:");
  espSerial.println(humidity, 1);
}

void displayVoltage() {
  int sensorValue = analogRead(VOLTAGE_PIN);
  float voltage = (sensorValue * 5.0 / 1023.0) * voltageFactor;

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Voltage:");
  lcd.setCursor(9, 0);
  lcd.print(voltage, 2);
  lcd.print("V");

  // --- Send to ESP32 ---
  espSerial.print("VOLT:");
  espSerial.println(voltage, 2);
}

void displayCurrent() {
  float current = readCurrent();

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Current:");
  lcd.setCursor(9, 0);
  lcd.print(current, 2);
  lcd.print("A");

  // --- Send to ESP32 ---
  espSerial.print("CURR:");
  espSerial.println(current, 2);
}

// =============================================================
// === READ CURRENT FROM ACS712 (RMS Method)
// =============================================================
float readCurrent() {
  int sampleCount = 100;
  float sum = 0;

  for (int i = 0; i < sampleCount; i++) {
    int sensorValue = analogRead(CURRENT_PIN);
    float voltage = (sensorValue * 5.0) / 1023.0;
    float currentSample = (voltage - 2.5) / sensitivity; // 2.5V = 0A offset
    sum += sq(currentSample);
  }

  return sqrt(sum / sampleCount);
}

// =============================================================
// === MOTOR CONTROL FUNCTIONS
// =============================================================
void motorForward() {
  digitalWrite(motorPin1, HIGH);
  digitalWrite(motorPin2, LOW);
}

void motorBackward() {
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, HIGH);
}

void motorStop() {
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
}
